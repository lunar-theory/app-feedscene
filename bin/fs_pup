#!/usr/bin/env perl -w

use 5.12.0;

use lib 'lib';
use App::FeedScene::EntryUpdater;
use Getopt::Long;
Getopt::Long::Configure( qw(bundling) );

GetOptions(
    'app|a=s'    => \my $app,
    'portal|p=i' => \my $portal,
    'all'        => \my $all,
#   'verbose|V+' => \my $verbose,
    'help|h'     => \my $help,
    'man|m'      => \my $man,
    'version|v'  => \my $version,
) or _pod2usage();

_pod2usage(
    ( $man ? ( '-sections' => '.+' ) : ()),
    '-exitval' => 0,
) if $help or $man;

# Handle version request.
if ($version) {
    require File::Basename;
    say File::Basename::basename($0), ' ', App::FeedScene->VERSION;
    exit;
}

_pod2usage('-message' => 'Missing or invalid --app option') unless $app;
_pod2usage('-message' => 'Missing or invalid --portal or --all option')
    unless defined $portal || $all;

for my $p (defined $portal ? ($portal) : (0..6)) {
    App::FeedScene::EntryUpdater->new(
        app    => $app,
        portal => $p,
    )->run;
}

sub _pod2usage {
    require Pod::Usage;
    Pod::Usage::pod2usage(
        '-verbose'  => 99,
        '-sections' => '(?i:(Usage|Options))',
        '-exitval'  => 1,
        @_
    );
}

=head1 Name

fs_lup - FeedScene portal updater

=head1 Usage

  fs_lup --app APPNAME --portal PORTAL

=head1 Description

This program updates a portal (or all portals) in the database by reading
the list of feeds from the portal, fetching them, parsing their contents,
and then storing them in the database ready to be generated into an updated
FeedScene feed.

=head1 Options

  -a --app NAME       Name of the FeedScene app.
  -u --portal PORTAL  Portal number to update.
     --all            Update all portals.
  -h --help           Print a usage statement and exit.
  -m --man            Print the complete documentation and exit.
  -v --version        Print the version number and exit.

=head1 Author

David E. Wheeler <david@kineticode.com>

=head1 Copyright

Copyright (c) 2010 David E. Wheeler. All rights reserved.

=cut
